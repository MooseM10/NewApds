{
	"info": {
		"_postman_id": "382541bb-4ee7-46e7-9379-84fee2a80fdd",
		"name": "APDS7311",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24675574"
	},
	"item": [
		{
			"name": "Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has valid data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('username'); \r",
							"    pm.expect(jsonData).to.have.property('id'); \r",
							"    pm.expect(jsonData).to.have.property('role'); \r",
							"    pm.expect(jsonData).to.have.property('iat'); \r",
							"    pm.expect(jsonData).to.have.property('exp'); \r",
							"\r",
							"//Validate the data types\r",
							"    pm.expect(jsonData.username).to.be.a('string');\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"    pm.expect(jsonData.role).to.be.a('string');\r",
							"    pm.expect(jsonData.iat).to.be.a('number');\r",
							"    pm.expect(jsonData.exp).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hdHRzY3J1c2UiLCJpZCI6IjY3MWE1YjhkZTk5NmE0MTJiMDc1NDUwMSIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTczMTEyOTc1NSwiZXhwIjoxNzMxMTMzMzU1fQ.RB_ZIwgyMabSQBGhSVIKPJf6gymy4PljH9DES9NHCts",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://localhost:8000/profile",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has valid data structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Check that 'user' object exists and has 'username' and 'id' properties\r",
							"    pm.expect(jsonData).to.have.property('user');\r",
							"    pm.expect(jsonData.user).to.have.property('username');\r",
							"    pm.expect(jsonData.user).to.have.property('id');\r",
							"    \r",
							"    // Check that 'message' property exists and is \"Login successful\"\r",
							"    pm.expect(jsonData).to.have.property('message', 'Login successful');\r",
							"    \r",
							"    // Check that 'token' property exists and is not empty\r",
							"    pm.expect(jsonData).to.have.property('token');\r",
							"    pm.expect(jsonData.token).to.be.a('string');\r",
							"    pm.expect(jsonData.token).to.not.be.empty;\r",
							"    \r",
							"    // Validate data types\r",
							"    pm.expect(jsonData.user.username).to.be.a('string');\r",
							"    pm.expect(jsonData.user.id).to.be.a('string');\r",
							"    pm.expect(jsonData.message).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"mattscruse\", \"password\": \"F0rthewin1\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8000/login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has valid data structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Check that 'message' property exists and is \"Payment submitted\"\r",
							"    pm.expect(jsonData).to.have.property('message', 'Payment submitted');\r",
							"    \r",
							"    // Check that 'payment' object exists and has the required properties\r",
							"    pm.expect(jsonData).to.have.property('payment');\r",
							"    pm.expect(jsonData.payment).to.have.property('userId');\r",
							"    pm.expect(jsonData.payment).to.have.property('amount');\r",
							"    pm.expect(jsonData.payment).to.have.property('currency');\r",
							"    pm.expect(jsonData.payment).to.have.property('provider');\r",
							"    pm.expect(jsonData.payment).to.have.property('accountNumber');\r",
							"    pm.expect(jsonData.payment).to.have.property('swiftCode');\r",
							"    pm.expect(jsonData.payment).to.have.property('reference');\r",
							"    pm.expect(jsonData.payment).to.have.property('status');\r",
							"    pm.expect(jsonData.payment).to.have.property('_id');\r",
							"    pm.expect(jsonData.payment).to.have.property('createdAt');\r",
							"    \r",
							"    // Validate data types\r",
							"    pm.expect(jsonData.payment.userId).to.be.a('string');\r",
							"    pm.expect(jsonData.payment.amount).to.be.a('number');\r",
							"    pm.expect(jsonData.payment.currency).to.be.a('string');\r",
							"    pm.expect(jsonData.payment.provider).to.be.a('string');\r",
							"    pm.expect(jsonData.payment.accountNumber).to.be.a('string');\r",
							"    pm.expect(jsonData.payment.swiftCode).to.be.a('string');\r",
							"    pm.expect(jsonData.payment.reference).to.be.a('string');\r",
							"    pm.expect(jsonData.payment.status).to.be.a('string');\r",
							"    pm.expect(jsonData.payment._id).to.be.a('string');\r",
							"    pm.expect(jsonData.payment.createdAt).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a unique swiftCode (could use a timestamp or a random number)\r",
							"let swiftCode = 'SWFT' + Math.floor(Math.random() * 10000);  // Example: SWFT1234\r",
							"\r",
							"// Set the swiftCode in the environment variable\r",
							"pm.environment.set('swiftCode', swiftCode);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"671a5b8de996a412b0754501\",\r\n  \"amount\": 100,\r\n  \"currency\": \"USD\",\r\n  \"accountNumber\": \"12345678\",\r\n  \"swiftCode\": \"{{swiftCode}}\",\r\n  \"reference\": \"PaymentRef\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8000/api/payments/makePayment",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"payments",
						"makePayment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Employee Transactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each transaction has the required properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    jsonData.forEach(function(transaction) {\r",
							"        // Ensure basic structure\r",
							"        pm.expect(transaction).to.have.property('_id');\r",
							"        pm.expect(transaction).to.have.property('userId');\r",
							"        pm.expect(transaction).to.have.property('amount');\r",
							"        pm.expect(transaction).to.have.property('currency');\r",
							"        pm.expect(transaction).to.have.property('provider');\r",
							"        pm.expect(transaction).to.have.property('accountNumber');\r",
							"        pm.expect(transaction).to.have.property('swiftCode');\r",
							"        pm.expect(transaction).to.have.property('reference');\r",
							"        pm.expect(transaction).to.have.property('status');\r",
							"        pm.expect(transaction).to.have.property('createdAt');\r",
							"\r",
							"        // Check userId subfields\r",
							"        pm.expect(transaction.userId).to.have.property('_id');\r",
							"        pm.expect(transaction.userId).to.have.property('username');\r",
							"\r",
							"        // Validate data types\r",
							"        pm.expect(transaction._id).to.be.a('string');\r",
							"        pm.expect(transaction.userId._id).to.be.a('string');\r",
							"        pm.expect(transaction.userId.username).to.be.a('string');\r",
							"        pm.expect(transaction.amount).to.be.a('number');\r",
							"        pm.expect(transaction.currency).to.be.a('string');\r",
							"        pm.expect(transaction.provider).to.be.a('string');\r",
							"        pm.expect(transaction.accountNumber).to.be.a('string');\r",
							"        pm.expect(transaction.swiftCode).to.be.a('string');\r",
							"        pm.expect(transaction.reference).to.be.a('string');\r",
							"        pm.expect(transaction.status).to.be.a('string');\r",
							"        pm.expect(transaction.createdAt).to.be.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hdHRzY3J1c2UiLCJpZCI6IjY3MWE1YjhkZTk5NmE0MTJiMDc1NDUwMSIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTczMTEyOTc1NSwiZXhwIjoxNzMxMTMzMzU1fQ.RB_ZIwgyMabSQBGhSVIKPJf6gymy4PljH9DES9NHCts",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://localhost:8000/api/employee/transactions",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"employee",
						"transactions"
					]
				}
			},
			"response": []
		}
	]
}